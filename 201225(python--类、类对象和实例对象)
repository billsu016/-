#类和对象
#组合
class Turtle:
    def __init__(self, x):
        self.num = x


class Fish:
    def __init__(self, x):
        self.num = x


class Pool:
    def __init__(self, x, y):
        self.turtle = Turtle(x)
        self.fish = Fish(y)

    def print_num(self):
        print("水池里面有乌龟%s只，小鱼%s条" % (self.turtle.num, self.fish.num))


p = Pool(2, 3)#在调用Pool函数时，需给出变量的值
p.print_num()#类中的函数需主动调用才能使用（__init__除外）
# 水池里面有乌龟2只，小鱼3条

#类、类对象和实例对象
class A():
    a = 0  #类属性
    def __init__(self, xx):
        A.a = xx  #使用类属性可以通过 （类名.类属性）调用。
        
# 创建类对象
class Test(object):
    class_attr = 100  # 类属性

    def __init__(self):
        self.sl_attr = 100  # 实例属性

    def func(self):
        print('类对象.类属性的值:', Test.class_attr)  # 调用类属性
        print('self.类属性的值', self.class_attr)  # 相当于把类属性 变成实例属性
        print('self.实例属性的值', self.sl_attr)  # 调用实例属性



a = Test()
a.func()

# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100

b = Test()
b.func()

# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100

a.class_attr = 200
a.sl_attr = 200
a.func()

# 类对象.类属性的值: 100
# self.类属性的值 200
# self.实例属性的值 200

b.func()

# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100

Test.class_attr = 300
a.func()

# 类对象.类属性的值: 300
# self.类属性的值 200--虽然类的属性已变为300，但之前已经有a.class_attr = 200，相当于该属性已被a实例化，故此处的值为200。
# self.实例属性的值 200

b.func()
# 类对象.类属性的值: 300
# self.类属性的值 300
# self.实例属性的值 100

# self.实例属性的值 100属性与方法名相同，属性会覆盖方法。
class A:
    def x(self):
        print('x_man')


aa = A()
aa.x()  # x_man
aa.x = 1
print(aa.x)  # 1
aa.x()
# TypeError: 'int' object is not callable


#Python 对象的数据属性通常存储在名为.__ dict__的字典中，我们可以直接访问__dict__，或利用 Python 的内置函数vars()获取.__ dict__。
class CC:
    def setXY(self, x, y):
        self.x = x
        self.y = y

    def printXY(self):
        print(self.x, self.y)


dd = CC()
print(dd.__dict__)
# {}

print(vars(dd))
# {}

print(CC.__dict__)
# {'__module__': '__main__', 'setXY': <function CC.setXY at 0x000000C3473DA048>, 'printXY': <function CC.printXY at 0x000000C3473C4F28>, '__dict__': <attribute '__dict__' of 'CC' objects>, '__weakref__': <attribute '__weakref__' of 'CC' objects>, '__doc__': None}

print(vars(CC))
# {'__module__': '__main__', 'setXY': <function CC.setXY at 0x000000632CA9B048>, 'printXY': <function CC.printXY at 0x000000632CA83048>, '__dict__': <attribute '__dict__' of 'CC' objects>, '__weakref__': <attribute '__weakref__' of 'CC' objects>, '__doc__': None}

dd.setXY(4, 5)#此处的x,y可以是字符串。
print(dd.__dict__)
# {'x': 4, 'y': 5}

print(vars(dd))
# {'x': 4, 'y': 5}

#内置函数
#issubclass(class,classinfo)方法用于判断参数 class 是否是类型参数 classinfo 的子类。
#一个类被认为是其自身的子类。
#classinfo可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回True。

class A:
    pass


class B(A):
    pass


print(issubclass(B, A))  # True
print(issubclass(B, B))  # True
print(issubclass(A, B))  # False
print(issubclass(B, object))  # True,Object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。

#isinstance()方法用于判断一个对象是否是一个已知的类型，类似type()。
#type()不会认为子类是一种父类类型，不考虑继承关系。
#isinstance()会认为子类是一种父类类型，考虑继承关系。
#如果第一个参数不是对象，则永远返回False。
#如果第二个参数不是类或者由类对象组成的元组，会抛出一个TypeError异常。

a = 2
print(isinstance(a, int))  # True
print(isinstance(a, str))  # False
print(isinstance(a, (str, int, list)))  # True


class A:
    pass


class B(A):
    pass


print(isinstance(A(), A))  # True
print(type(A()) == A)  # True
print(isinstance(A, A))  # False，第一个参数不是对象。
print(isinstance(B(), A))  # True
print(type(A))  # <class 'type'>，参数是类。
print(type(B()))  # <class '__main__.B'>，参数是对象。
print(type(B()) == A)  # False


#hasattr(object, name)用于判断对象是否包含对应的属性。
class Coordinate:
    x = 10
    y = -5
    z = 0


point1 = Coordinate()
print(hasattr(point1, 'x'))  # True
print(hasattr(point1, 'y'))  # True
print(hasattr(point1, 'z'))  # True
print(hasattr(point1, 'no'))  # False
